class Router {
    private int memoryLimit;
    private Set<String> uniquePackets;  // to reject duplicates
    private Deque<int[]> packetQueue;   // FIFO storage
    private Map<Integer, List<Integer>> destinationTimestamps; // dest -> timestamps
    private Map<Integer, Integer> processedIndex; // dest -> count of forwarded packets

    public Router(int memoryLimit) {
        this.memoryLimit = memoryLimit;
        this.uniquePackets = new HashSet<>();
        this.packetQueue = new ArrayDeque<>();
        this.destinationTimestamps = new HashMap<>();
        this.processedIndex = new HashMap<>();
    }

    public boolean addPacket(int source, int destination, int timestamp) {
        String key = source + "," + destination + "," + timestamp;
        if (uniquePackets.contains(key)) return false;

        // Evict if memory full
        if (packetQueue.size() == memoryLimit) {
            forwardPacket();
        }

        packetQueue.offer(new int[]{source, destination, timestamp});
        uniquePackets.add(key);

        destinationTimestamps
            .computeIfAbsent(destination, k -> new ArrayList<>())
            .add(timestamp);

        return true;
    }

    public int[] forwardPacket() {
        if (packetQueue.isEmpty()) return new int[]{};

        int[] pkt = packetQueue.poll();
        String key = pkt[0] + "," + pkt[1] + "," + pkt[2];
        uniquePackets.remove(key);

        // Mark as processed for this destination
        processedIndex.put(pkt[1], processedIndex.getOrDefault(pkt[1], 0) + 1);

        return pkt;
    }

    public int getCount(int destination, int startTime, int endTime) {
        if (!destinationTimestamps.containsKey(destination)) return 0;

        List<Integer> timestamps = destinationTimestamps.get(destination);
        int startIdx = processedIndex.getOrDefault(destination, 0);

        // Binary search within the unprocessed portion
        int lo = lowerBound(timestamps, startTime, startIdx);
        int hi = upperBound(timestamps, endTime, startIdx);

        return hi - lo;
    }

    // helper: first index >= target
    private int lowerBound(List<Integer> arr, int target, int from) {
        int l = from, r = arr.size();
        while (l < r) {
            int m = (l + r) / 2;
            if (arr.get(m) < target) l = m + 1;
            else r = m;
        }
        return l;
    }

    // helper: first index > target
    private int upperBound(List<Integer> arr, int target, int from) {
        int l = from, r = arr.size();
        while (l < r) {
            int m = (l + r) / 2;
            if (arr.get(m) <= target) l = m + 1;
            else r = m;
        }
        return l;
    }
}


/**
 * Your Router object will be instantiated and called as such:
 * Router obj = new Router(memoryLimit);
 * boolean param_1 = obj.addPacket(source,destination,timestamp);
 * int[] param_2 = obj.forwardPacket();
 * int param_3 = obj.getCount(destination,startTime,endTime);
 */
